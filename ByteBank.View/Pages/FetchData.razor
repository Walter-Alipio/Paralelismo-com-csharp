@page "/"
@using ByteBank.View.Data
@using ByteBank.View.Utils
@inject ViewDataClientsService ClienteService

<PageTitle>ByteBank</PageTitle>

<h1>ByteBank transações</h1>

<p>Processamento das informações do dia.</p>
<div class="container row gap-2 w-50">
    <button class="btn btn-primary col" disabled=@IsTaskRunning @onclick=@ProccessOnClick>Fazer Processamento</button>
    <button class="btn btn-primary col" disabled=@IsCancelDisable @onclick=@CancelProccess>Cancelar</button>
</div>


@if(IsTaskRunning)
{
    <div class="progress mt-3" role="progressbar" aria-label="Animated striped example" aria-valuenow="@_progressBar" aria-valuemin="0" aria-valuemax=@_maxValue style="height: 20px" >
         <div class="progress-bar progress-bar-striped  bg-success progress-bar-animated fs-6 " 
            style="width: @(_progressBar)%">@_progressBar%</div>
    </div>
}
@if (modelClient != null)
{   

    <div class="d-flex p-2 mt-3">
        <p>@modelClient.mensagem</p>
    </div>
    <table class="table">
        <thead>
            <tr>
                <th>Resultado:</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var resultado in modelClient.Resultado)
            {
                <tr>
                    <td>@resultado</td>       
                </tr>
            }
        </tbody>
    </table>
}

@code {

    private ViewModelDataClient? modelClient;
    private bool IsTaskRunning = false;
    private bool IsCancelDisable = true;
    private CancellationTokenSource _cts;
    private int _progressBar;
    private int _maxValue;
    private int count;

    private async void ProccessOnClick()    
    {
      modelClient = null;  
      this.IsTaskRunning = true;
      IsCancelDisable = false;
      _progressBar=0;
      count = 0;

      _cts = new CancellationTokenSource();

      _maxValue = ClienteService.GetTotalOfContas();
      var progress = new ByteBankProgress<string>(str =>{   
        count++;
        _progressBar = count * 100 / _maxValue;
        StateHasChanged ();

      });

      modelClient = await AwaitProccessAsync(_cts.Token, progress);
    
      this.IsTaskRunning = false;
      IsCancelDisable = true;
      StateHasChanged ();

    }
    private void CancelProccess()
    {
        IsCancelDisable = true;
        _cts.Cancel();
    }
    private async Task<ViewModelDataClient> AwaitProccessAsync(CancellationToken ct,ByteBankProgress<string> progress)
    {
        //Implementar candelamento
        var resultado = await Task.Run(async () =>  await ClienteService.ProcessarAsync(ct, progress));

        return resultado;
    }

}
